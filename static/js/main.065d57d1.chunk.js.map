{"version":3,"sources":["api/data.ts","components/Button.tsx","components/SortPanel.tsx","components/TodoList.tsx","components/Loader.tsx","App.tsx","index.tsx"],"names":["API_URL","getPreparedData","a","fetch","mode","then","response","json","todosData","usersData","preparedTodos","map","todo","user","find","id","userId","Button","handleSort","sortType","type","className","onClick","SortPanel","TodoList","todos","useState","sortedTodos","setTodos","isSortedByTitle","setSortedByTitle","isSortedByName","setSortedByName","isSortedByStatus","setSortedByStatus","prev","sort","b","title","localeCompare","Number","completed","name","key","src","alt","Loader","App","isLoading","setLoading","isLoaded","setLoaded","data","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.065d57d1.chunk.js","sourcesContent":["import { Todo, User } from '../interfaces/interfaces';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport const getTodos = () => {\n  return fetch(`${API_URL}/todos`, { mode: 'no-cors' })\n    .then(response => response.json());\n};\n\nexport const getUsers = () => {\n  return fetch(`${API_URL}/users`, { mode: 'no-cors' })\n    .then(response => response.json());\n};\n\nexport const getPreparedData = async () => {\n  const todosData = await getTodos();\n  const usersData = await getUsers();\n  const preparedTodos = todosData.map((todo: Todo) => ({\n    ...todo,\n    user: usersData.find((user: User) => user.id === todo.userId),\n  }));\n\n  return preparedTodos;\n};\n","import React from 'react';\nimport { ButtonProps } from '../interfaces/interfaces';\n\nexport const Button: React.FC <ButtonProps> = ({\n  handleSort, sortType,\n}) => (\n  <button\n    type=\"button\"\n    className=\"waves-effect waves-light btn mgb20\"\n    onClick={() => handleSort(sortType)}\n  >\n    Sort by title\n  </button>\n);\n","import React from 'react';\nimport { SortPanelProps } from '../interfaces/interfaces';\nimport { Button } from './Button';\n\nexport const SortPanel: React.FC<SortPanelProps> = ({\n  handleSort,\n}) => {\n  return (\n    <div className=\"sort-panel\">\n      <Button handleSort={handleSort} sortType=\"title\" />\n      <Button handleSort={handleSort} sortType=\"status\" />\n      <Button handleSort={handleSort} sortType=\"name\" />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Todos } from '../interfaces/interfaces';\nimport { SortPanel } from './SortPanel';\n\nexport const TodoList: React.FC<Todos> = ({ todos }) => {\n  const [sortedTodos, setTodos] = useState([...todos]);\n\n  const [isSortedByTitle, setSortedByTitle] = useState(0);\n  const [isSortedByName, setSortedByName] = useState(0);\n  const [isSortedByStatus, setSortedByStatus] = useState(0);\n\n  const handleSort = (sortType: string) => {\n    if (sortType === 'title') {\n      if (isSortedByTitle === 1) {\n        setTodos(prev => [...prev].sort((a, b) => b.title.localeCompare(a.title)));\n        setSortedByTitle(0);\n      } else {\n        setTodos(prev => [...prev].sort((a, b) => a.title.localeCompare(b.title)));\n        setSortedByTitle(1);\n      }\n    }\n\n    if (sortType === 'status') {\n      if (isSortedByStatus === 1) {\n        setTodos(prev => [...prev].sort((a, b) => Number(b.completed) - Number(a.completed)));\n        setSortedByStatus(0);\n      } else {\n        setTodos(prev => [...prev].sort((a, b) => Number(a.completed) - Number(b.completed)));\n        setSortedByStatus(1);\n      }\n    }\n\n    if (sortType === 'name') {\n      if (isSortedByName === 1) {\n        setTodos(prev => [...prev].sort((a, b) => b.user.name.localeCompare(a.user.name)));\n        setSortedByName(0);\n      } else {\n        setTodos(prev => [...prev].sort((a, b) => a.user.name.localeCompare(b.user.name)));\n        setSortedByName(1);\n      }\n    }\n  };\n\n  return (\n    <>\n      <SortPanel handleSort={handleSort} />\n      <ul className=\"collection\">\n        {sortedTodos.map(({\n          id, title, completed, user,\n        }) => (\n          <li key={id} className=\"collection-item avatar\">\n            <img\n              src=\"https://materializecss.com/images/yuna.jpg\"\n              alt=\"\"\n              className=\"circle\"\n            />\n            <span className=\"title\">{user.name}</span>\n            <p>{title}</p>\n            <i className=\"secondary-content\">\n              {completed\n                ? <i className=\"material-icons color-green\">Completed</i>\n                : <i className=\"material-icons color-red\">In Process</i>}\n            </i>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React from 'react';\n\nexport const Loader = () => (\n  <div className=\"preloader-wrapper big active\">\n    <div className=\"spinner-layer spinner-blue\">\n      <div className=\"circle-clipper left\">\n        <div className=\"circle\" />\n      </div>\n      <div className=\"gap-patch\">\n        <div className=\"circle\" />\n      </div>\n      <div className=\"circle-clipper right\">\n        <div className=\"circle\" />\n      </div>\n    </div>\n  </div>\n);\n","import React, { useState } from 'react';\n\nimport './App.css';\nimport { getPreparedData } from './api/data';\nimport { TodoList } from './components/TodoList';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [isLoaded, setLoaded] = useState(false);\n\n  const loadTodos = () => {\n    setLoading(true);\n\n    getPreparedData()\n      .then(data => setTodos(data));\n\n    setLoading(false);\n    setLoaded(true);\n  };\n\n  return (\n    <>\n      <div className=\"heading\">\n        <h1>Dynamic list of TODOs</h1>\n        {!isLoading && !isLoaded\n        && (\n          <button\n            type=\"button\"\n            className=\"waves-effect waves-light btn-large mgb20\"\n            onClick={loadTodos}\n          >\n            load todos\n          </button>\n        )}\n        {isLoading && <Loader />}\n      </div>\n      {isLoaded && todos.length > 0 && (\n        <TodoList todos={todos} />)}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}